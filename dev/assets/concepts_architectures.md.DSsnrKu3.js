import{_ as a,c as s,o as e,aA as t}from"./chunks/framework.BA5u_Yub.js";const o=JSON.parse('{"title":"Architectures","description":"","frontmatter":{},"headers":[],"relativePath":"concepts/architectures.md","filePath":"concepts/architectures.md","lastUpdated":null}'),n={name:"concepts/architectures.md"};function l(h,i,p,r,d,c){return e(),s("div",null,[...i[0]||(i[0]=[t(`<h1 id="architectures" tabindex="-1">Architectures <a class="header-anchor" href="#architectures" aria-label="Permalink to &quot;Architectures&quot;">​</a></h1><h2 id="Backend-Selection-and-Architecture-Initialization" tabindex="-1">Backend Selection &amp; Architecture Initialization <a class="header-anchor" href="#Backend-Selection-and-Architecture-Initialization" aria-label="Permalink to &quot;Backend Selection &amp;amp; Architecture Initialization {#Backend-Selection-and-Architecture-Initialization}&quot;">​</a></h2><p>Chmy.jl supports CPUs, as well as CUDA, ROC and Metal backends for Nvidia, AMD and Apple M-series GPUs through a thin wrapper around the <a href="https://github.com/JuliaGPU/KernelAbstractions.jl" target="_blank" rel="noreferrer"><code>KernelAbstractions.jl</code></a> for users to select desirable backends. For distributed usage of Chmy.jl see the concept documentation on <a href="./distributed">Distributed</a>.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-3eTBU" id="tab-WJfkcdf" checked><label data-title="CPUs" for="tab-WJfkcdf">CPUs</label><input type="radio" name="group-3eTBU" id="tab-0Mp3YQj"><label data-title="Nvidia GPUs" for="tab-0Mp3YQj">Nvidia GPUs</label><input type="radio" name="group-3eTBU" id="tab-ZCKdqpI"><label data-title="AMD GPUs" for="tab-ZCKdqpI">AMD GPUs</label><input type="radio" name="group-3eTBU" id="tab-OQvL5OM"><label data-title="Apple GPUs" for="tab-OQvL5OM">Apple GPUs</label></div><div class="blocks"><div class="language-julia vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Default with CPU</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">backend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CPU</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Arch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CUDA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">backend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CUDABackend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Arch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AMDGPU</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">backend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ROCBackend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Arch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Metal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">backend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MetalBackend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Arch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend)</span></span></code></pre></div></div></div><p>At the beginning of program, one may specify the backend and initialise the architecture they desire to use. The initialised <code>arch</code> variable will be required explicitly at creation of some objects such as grids and kernel launchers.</p><h2 id="Specifying-the-device-ID-and-stream-priority" tabindex="-1">Specifying the device ID and stream priority <a class="header-anchor" href="#Specifying-the-device-ID-and-stream-priority" aria-label="Permalink to &quot;Specifying the device ID and stream priority {#Specifying-the-device-ID-and-stream-priority}&quot;">​</a></h2><p>On systems with multiple GPUs, passing the keyword argument <code>device_id</code> to the <code>Arch</code> constructor will select and set the selected device as a current device.</p><p>For advanced users, we provide a function <code>activate!(arch; priority)</code> for specifying the stream priority owned by the task one is executing. The stream priority will be set to <code>:normal</code> by default, where <code>:low</code> and <code>:high</code> are also possible options given that the target backend has priority control over streams implemented.</p>`,8)])])}const g=a(n,[["render",l]]);export{o as __pageData,g as default};
